(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

(function (global) {

	var Bark = {};

	// const fetch = require('node-fetch');

	Bark.VERSION = '0.1.1';

	/*
 *	Bark Model
 *	@constructor 
 *	@params {object} Options object
 *	@returns {object}
 */
	Bark.Model = function (options) {
		var defaults = {
			attrs: {},
			fetch: function (_fetch) {
				function fetch(_x) {
					return _fetch.apply(this, arguments);
				}

				fetch.toString = function () {
					return _fetch.toString();
				};

				return fetch;
			}(function (cb) {
				var _this = this;

				return new Promise(function (resolve, reject) {
					if (_this.url === undefined) {
						reject('WOOF: url property is not defined');
					}
					return fetch(_this.url, {
						method: 'GET'
					}).then(function (res) {
						res.json().then(function (data) {
							_this.attrs = data;
							resolve();
						});
					}).catch(function (err) {
						return reject(err);
					});
				});
			})
		};

		Object.assign(defaults, options);

		return defaults;
	};

	/*
 	Bark View
 	@constructor
 	@params {object} options used for view
 	@returns {object}
 */
	Bark.View = function (options) {
		var defaults = {
			elem: document.body,
			elemType: 'div',
			className: '',
			events: {}
		};

		var eventHandler = function eventHandler(events, element) {
			//loop through event keys
			var eventKeys = Object.keys(events);
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = eventKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var key = _step.value;

					//Apply events.

					var _key$split = key.split(' ');

					var _key$split2 = _slicedToArray(_key$split, 2);

					var eventName = _key$split2[0];
					var eventSelector = _key$split2[1];


					element.querySelector(eventSelector).addEventListener(eventName, defaults[events[key]]);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
		};

		Object.assign(defaults, options);

		return {
			render: function render() {
				if (defaults.template === undefined) {
					throw 'WOOF: No template defined';
				}
				var tempElm = document.createElement(defaults.elemType);
				if (defaults.className.length > 0) {
					tempElm.className = defaults.className;
				}
				tempElm.innerHTML = defaults.template;
				eventHandler(defaults.events, tempElm);
				defaults.elem.appendChild(tempElm);
			}
		};
	};

	// /*
	// 	Bark Template
	// 	@returns string
	// */

	Bark.Template = function (strings) {
		for (var _len = arguments.length, keys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			keys[_key - 1] = arguments[_key];
		}

		return function (data) {
			var temp = strings.slice();
			//function to walk through the object
			var retrieveNestedData = function retrieveNestedData(key, objData) {
				//Split string on keys
				var nested = key.split('.');
				//If there is more than one key
				if (nested.length > 1) {
					//Call self again with next key, and selected data
					return retrieveNestedData(nested[1], objData[nested[0]]);
				} else {
					// Else just return string
					return objData[key];
				}
			};
			keys.forEach(function (key, i) {
				var replaceString = retrieveNestedData(key, data);
				temp[i] = temp[i] + replaceString;
			});
			return temp.join('');
		};
	};

	// /*
	// 	Bark Controller
	// 	@constructor
	// 	@params {object} options used for controller
	// 	@returns {object}
	// */
	Bark.Controller = function (options) {
		var defaults = {
			init: function init() {
				//Nothing to see here
			}
		};
		Object.assign(defaults, options);
		defaults.init();
		return defaults;
	};
	global.Bark = Bark;
})(typeof exports === 'undefined' ? window : exports);

},{}]},{},[1]);
